1.在Time里面新加了一个操作+，放在定义-操作下面

/**
 * @brief 重载加法运算符 (-) 用于计算两个 Time 对象的时间差。
 * @param t1 减法操作的左侧 Time 对象。
 * @param t2 减法操作的右侧 Time 对象。
 * @return 返回一个新的 Time 对象，表示 t1 加上 t2 的时间差。
 */
Time operator + (Time t1, Time t2){
    // Time 对象的加法重载，实现两 Time 对象的时间差计算

    // 创建临时 Time 对象用于存储计算结果
    Time tmp_t;

    // 计算分钟
    int tem_minute = 0;
    if (t1.minute + t2.minute >= 60)
    {
    tmp_t.minute = t1.minute + t2.minute - 60; 
    tem_minute++;
    }
    else
    {
        tmp_t.minute = t1.minute + t2.minute;
    }

    // 计算小时
    int tem_hour = 0;
    if (t1.hour + t2.hour + tem_minute >= 24 ) {
        tmp_t.hour = t1.hour + t2.hour - 24;
        tem_hour ++;
    }
    else{
        tmp_t.hour = t1.hour + t2.hour;
    }

    // 计算天数差值
    tmp_t.day += t1.day + t2.day + tem_hour;

    // 返回计算结果
    return tmp_t;
}




2.在ALGraph里面重新写了DFS算法，用于求花费最小的路径
/**
 * 深度优先搜索（DFS）函数，用于查找从当前城市到目标城市的最低票价。
 *
 * @param currentCity    当前正在探索的城市。
 * @param end_city       目标城市。
 * @param path           当前正在探索的路径。
 * @param minPrice       最低票价的引用。
 * @param minPath        最低票价对应的路径的引用。
 * @param currentPrice   当前路径的累计票价。
 */
float dfs(string currentCity, string end_city, vector<LineNode>& path, double& minPrice, vector<LineNode>& minPath, double currentPrice, LineNode line) {
    // 将当前城市加入路径
    path.push_back(line);

    // // 检查当前城市是否为目标城市
    if (currentCity == end_city) {
        // 如果当前路径更便宜，更新最低票价和路径
        if (currentPrice < minPrice) {
            minPrice = currentPrice;
            minPath = path;
        }
    } else {
        // 探索所有邻近城市
        for (const LineNode& flight : graph[currentCity]) {
            
            // 检查邻近城市是否尚未被访问
                if (std::find_if(path.begin(), path.end(), [&flight](const LineNode& node) {
                    return node.start_city_name == flight.end_city_name;
                }) == path.end()) {
                dfs(flight.end_city_name, end_city, path, minPrice, minPath, currentPrice + flight.spend_money, flight);
                }
        }
    }


    // 回溯：从路径中移除当前城市
    path.pop_back();
}





3.在ALGraph外面重新写了展示最小花费路径
void ALGraph::printLeastMoneyPath (const std::string &start_city, const std::string &end_city)
{
    
    double minPrice = DBL_MAX; 
    vector<LineNode> path;
    vector<LineNode> minPath;
    LineNode line;
    dfs(start_city, end_city, path, minPrice, minPath, 0.0, line);
    Time et(0,0,0);
    int T = -1;
    minPath.erase(minPath.begin());

    cout << "最小的花费为: " << minPrice << endl;
    cout << "路径如下: " << endl;
    for (const LineNode& city : minPath) {
        if(et < city.start_time ) T += 1;
        cout<< city.start_city_name <<"  班次为："<< city.rank <<"  出发时间为:"<< city.start_time + Time(0,0,T) <<" day"<<"  到达时间为"<< city.end_time + Time(0,0,T) <<"day"<<" -->"<< city.end_city_name <<endl;

    }
}